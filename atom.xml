<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>学习笔记</title>
  
  <subtitle>学习笔记</subtitle>
  <link href="http://blog.duozhilin.cn/atom.xml" rel="self"/>
  
  <link href="http://blog.duozhilin.cn/"/>
  <updated>2021-01-23T14:51:46.299Z</updated>
  <id>http://blog.duozhilin.cn/</id>
  
  <author>
    <name>some one</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Thinking in UML（二）——建模基础</title>
    <link href="http://blog.duozhilin.cn/2019/01/20/thinking-in-uml-modeling-base/"/>
    <id>http://blog.duozhilin.cn/2019/01/20/thinking-in-uml-modeling-base/</id>
    <published>2019-01-20T10:43:39.000Z</published>
    <updated>2021-01-23T14:51:46.299Z</updated>
    
    <content type="html"><![CDATA[<h2 id="建模"><a href="#建模" class="headerlink" title="建模"></a>建模</h2><p>建模（Modeling)，是指通过对客观事物建立一种抽象的方法用以表征事物并获得对事物本身的理解，同时把这种理解概念化，将这些逻辑概念组织起来，构成一种对所观察的对象的内部结构和工作原理的便于理解的表达。简单说：建模包含两个问题，一个是模是什么，另一个是怎么建。</p><h3 id="模是什么"><a href="#模是什么" class="headerlink" title="模是什么"></a>模是什么</h3><p>一个由抽象角度确定了的目标需要由静态的事物加上特定条件下产生的一个特定的场景来完成，即静态的事物（物）+特定的条件（规则）+特定的动作（参与者的驱动）=特定的场景（事件）。模就是这里面的“人”、“事”、“物”和“规则”。</p><h3 id="怎么建"><a href="#怎么建" class="headerlink" title="怎么建"></a>怎么建</h3><p>首先需要确定业务有那些参与者，并确定每个参与者的目标，也就是后面所说的“用例”；<br>其次，根据每个参与者的目标确定合适的抽象角度，即建立这个模型的目的是什么，抽象角度的不同决定了建模方向的不同。例如对于“筷子”、“勺子”、“盘子”三个事物，可以从用途的角度来抽象，也可以通过原材料等角度来抽象，关键是要看你是要开餐馆还是开餐具制造厂，一旦确定了抽象角度就可以确定建模方向；<br>最后根据确定的抽象角度来建立对应的模型。</p><h2 id="用例驱动"><a href="#用例驱动" class="headerlink" title="用例驱动"></a>用例驱动</h2><p>用例驱动方法的原理：在统一过程中，用例捕获了系统的功能性需求，一旦找到的事物、规则和行为实现了所有必要的用例，那么问题领域就被解决了。<br>用例可驱动的内容包括：</p><img src="/2019/01/20/thinking-in-uml-modeling-base/%E5%9B%BE2.2%E7%94%A8%E4%BE%8B%E5%8F%AF%E9%A9%B1%E5%8A%A8%E7%9A%84%E5%86%85%E5%AE%B9.png" class="" title="用例驱动视图"><h2 id="抽象层次"><a href="#抽象层次" class="headerlink" title="抽象层次"></a>抽象层次</h2><p>抽象层次直接反映到用例的粒度。首先，抽象层次越高，具体信息越少，但是概括能力更强；反之，具体信息越丰富，结果越准确，但是相应的概括能力越弱。从信息的表达能力上说，抽象层次越高表达能力越丰富，越容易理解；但是抽象层次如果太高，信息量过少的话，人们实施起来又会产生新的困难——信息量不足。因此，在面向对象的分析过程中，在适当的时候采用适当的抽象层次是十分重要的。</p><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>视图用于组织UML元素，表达出模型某一方面的含义。视图的准确应用是建立好模型的一个重要组成部分。每个视图都向观察者展示了目标对象的一个方面，只有将必要的方面都用视图展示出来了，观察者才会真正理解这个事物。<br>建立模型的目的是向相关的人（干系人）展示将要生产的软件产品，一个软件产品有很多不同的方面，只有把这些方面都描述清楚，用很多不同的视图去展示软件这些不同的方面——静态的、动态的、结构性的——才能够说建立了一个完整的模型。为了说明这些不同的方面，UML里定义了用例图、对象图、类图、包图、活动图等不同的视图。这些视同从不同的方面描述了一个软件的结构和组成，所有这些视图的集合表达了一个软件的完整含义。所以，建模最主要的工作就是为软件绘制那些表达软件含义的视图来完整地表达软件的含义。</p><h3 id="视角"><a href="#视角" class="headerlink" title="视角"></a>视角</h3><p>不同的人或者同一个人处于不同的目的会对同一个信息从不同的角度来审视和评估。视角是针对每一个视图来说的，不同的视角展示了同样信息的不同认知角度以便于理解。一方面，从信息的展示角度来说，恰当的视角可以让观察者更容易抓住信息的本质；另一方面，从观察者角度来说，观察者只会关心信息中他感兴趣的那一部分视角。因此在展示信息时选择适当的视角并展示给适当的观察者是十分重要的。</p><h3 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h3><ul><li>为特定的信息选择正确的视图；</li><li>为特定的干系人展示正确的视角。</li></ul><h2 id="对象分析方法"><a href="#对象分析方法" class="headerlink" title="对象分析方法"></a>对象分析方法</h2><ul><li>一切都是对象</li><li>对象都是独立的</li><li>对象都具有原子性</li><li>对象都是可抽象的</li><li>对象都有层次性</li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>模就算实现特定问题领域参与者目标的“人”、“物”、“事”、“规则”；建模就是一个用正确的抽象角度和抽象层次来找出这些能实现目标的“人”、“物”、“事”、“规则”的行为，统一过程是指导这个过程的一种方法。每一个视图可以描述目标对象的一个方面，不同的信息需要用不同的视图来表述；不同的参与者会因为目的不同而需要展示不同的视角。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;建模&quot;&gt;&lt;a href=&quot;#建模&quot; class=&quot;headerlink&quot; title=&quot;建模&quot;&gt;&lt;/a&gt;建模&lt;/h2&gt;&lt;p&gt;建模（Modeling)，是指通过对客观事物建立一种抽象的方法用以表征事物并获得对事物本身的理解，同时把这种理解概念化，将这些逻辑概念组织起</summary>
      
    
    
    
    <category term="UML" scheme="http://blog.duozhilin.cn/categories/UML/"/>
    
    
    <category term="UML" scheme="http://blog.duozhilin.cn/tags/UML/"/>
    
    <category term="Thinking in UML" scheme="http://blog.duozhilin.cn/tags/Thinking-in-UML/"/>
    
  </entry>
  
  <entry>
    <title>Thinking in UML（一）——UML介绍</title>
    <link href="http://blog.duozhilin.cn/2019/01/15/thinking-in-uml-uml-introduction/"/>
    <id>http://blog.duozhilin.cn/2019/01/15/thinking-in-uml-uml-introduction/</id>
    <published>2019-01-15T13:38:15.000Z</published>
    <updated>2021-01-23T14:51:46.302Z</updated>
    
    <content type="html"><![CDATA[<h2 id="UML是什么"><a href="#UML是什么" class="headerlink" title="UML是什么"></a>UML是什么</h2><p>统一建模语言（Unified Modeling Language）简称UML，是一种建模用的语言，它定义了一些建立模型所需要的、表达某种特殊含义的基本元素，这些基本元素称为元模型，相当于语言中的基本词汇，比如“用例”、“类”等，还定义了这些元模型互相之间关系的规则，以及如何使用这些元素和规则绘制图形以建立模型来映射现实世界，这些规则和图形称为表示法或视图（view），相当于语言中的语法。</p><h2 id="为什么需要UML"><a href="#为什么需要UML" class="headerlink" title="为什么需要UML"></a>为什么需要UML</h2><p>现实世界和对象世界之间存在着一道鸿沟，这道鸿沟的名字就叫抽象。抽象是面向对象的精髓所在，同时也是面向对象的困难所在。实际上，要想跨越这道鸿沟，我们需要：</p><ul><li>一种把现实世界映射到对象世界的方法。</li><li>一种从对象世界描述现实世界的方法。</li><li>一种验证对象世界行为是否正确反映了现实世界的方法。</li></ul><p>幸运的是，UML，准确的说是UML背后所代表的面向对象分析设计方法，正好架起了跨越这道鸿沟的桥梁。</p><h2 id="UML带来了什么"><a href="#UML带来了什么" class="headerlink" title="UML带来了什么"></a>UML带来了什么</h2><ul><li>一种把现实世界映射到对象世界的方法：从现实世界到业务模型。</li><li>一种从对象世界描述现实世界的方法：从业务模型到概念模型。</li><li>一种验证对象世界行为是否正确反映了现实世界的方法：从概念模型到设计模型。<img src="/2019/01/15/thinking-in-uml-uml-introduction/%E5%9B%BE1.9%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%88%86%E6%9E%90%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%AE%8C%E6%95%B4%E8%BF%87%E7%A8%8B.png" class="" title="图1.9 面向对象分析设计的完整过程.png"></li></ul><h2 id="统一过程方法"><a href="#统一过程方法" class="headerlink" title="统一过程方法"></a>统一过程方法</h2><h3 id="统一过程方法是什么"><a href="#统一过程方法是什么" class="headerlink" title="统一过程方法是什么"></a>统一过程方法是什么</h3><p>统一过程方法（Rational Unified Process）简称RUP，是一个采用面向对象思想，使用UML作为软件分析设计语言，并且结合了项目管理、质量保证等许多软件工程知识综合而成的一个非常完整和庞大的软件方法。统一过程方法归纳和集成了软件开发活动中的最佳实践，定义了软件开发过程中最重要的阶段和工作（四个阶段和九个核心工作流），定义了参与软件开发过程的各种角色和他们的职责，还定义了软件生产过程中产生的工件，并提供了模板。</p><img src="/2019/01/15/thinking-in-uml-uml-introduction/%E5%9B%BE1.11%E5%9B%9B%E4%B8%AA%E9%98%B6%E6%AE%B5%E5%92%8C%E4%B9%9D%E4%B8%AA%E6%A0%B8%E5%BF%83%E5%B7%A5%E4%BD%9C%E6%B5%81.png" class="" title="统一过程方法的四个阶段和九个核心工作流"><h3 id="统一过程方法和UML"><a href="#统一过程方法和UML" class="headerlink" title="统一过程方法和UML"></a>统一过程方法和UML</h3><ul><li>不同点：<ul><li>属于不同领域，UML是一种语言，统一过程是一种方法，UML和统一过程的关系相当于五线谱和音乐理论的关系；</li><li>UML可以和统一过程方法一其使用，也可以和其他方法一起使用，并不是不可分开的，比如UML也可以和UML方法一起使用；</li></ul></li><li>相关点：<ul><li>师出同门；</li><li>统一过程是目前和UML集成最好、最完整的软件方法，是指导UML的方法中最著名、应用最广、可能也是最成功的一个。</li></ul></li></ul><h3 id="统一过程方法和敏捷方法"><a href="#统一过程方法和敏捷方法" class="headerlink" title="统一过程方法和敏捷方法"></a>统一过程方法和敏捷方法</h3><ul><li>统一过程方法适用于大型公司或者大型项目，例如制造F35战机；敏捷方法适用于中小型公司或者中小型项目，例如制造F35战机的各个零部件。</li><li>统一过程方法控制变更，是一种重量级的方法，非常复杂，实施成本大；敏捷方法拥抱变更，是一种轻量级的方法，比较简单，实施成本小。</li></ul><h3 id="统一过程知识体系"><a href="#统一过程知识体系" class="headerlink" title="统一过程知识体系"></a>统一过程知识体系</h3><img src="/2019/01/15/thinking-in-uml-uml-introduction/%E5%9B%BE1.12%E7%BB%9F%E4%B8%80%E8%BF%87%E7%A8%8B%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB.png" class="" title="统一过程的主要知识体系"><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>UML提供了将现实世界映射到对象世界和用对象世界描述现实世界的方法，还提供了验证对象世界的行为是否正确的反映了现实世界的方法。</li><li>统一过程和UML是两个不同的领域，可以单独使用，但是统一过程是目前指导UML的方法中使用最广、最成功的一个。</li><li>统一过程方法和敏捷方法都有各自适用的场景，而且可以结合到一起来使用。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;UML是什么&quot;&gt;&lt;a href=&quot;#UML是什么&quot; class=&quot;headerlink&quot; title=&quot;UML是什么&quot;&gt;&lt;/a&gt;UML是什么&lt;/h2&gt;&lt;p&gt;统一建模语言（Unified Modeling Language）简称UML，是一种建模用的语言，它定义了一</summary>
      
    
    
    
    <category term="UML" scheme="http://blog.duozhilin.cn/categories/UML/"/>
    
    
    <category term="UML" scheme="http://blog.duozhilin.cn/tags/UML/"/>
    
    <category term="Thinking in UML" scheme="http://blog.duozhilin.cn/tags/Thinking-in-UML/"/>
    
  </entry>
  
  <entry>
    <title>读书计划</title>
    <link href="http://blog.duozhilin.cn/2017/01/13/reading-plan/"/>
    <id>http://blog.duozhilin.cn/2017/01/13/reading-plan/</id>
    <published>2017-01-13T13:08:58.000Z</published>
    <updated>2021-01-23T14:51:46.299Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2017年"><a href="#2017年" class="headerlink" title="2017年"></a>2017年</h2><h3 id="计算机类"><a href="#计算机类" class="headerlink" title="计算机类"></a>计算机类</h3><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>《浪潮之巅》</li><li>《硅谷之谜》</li><li>《文明之光》</li><li>《智能时代》</li><li>《地球往事》</li><li>《人类简史》</li><li>《三体1——地球往事》</li></ul><h2 id="2018年"><a href="#2018年" class="headerlink" title="2018年"></a>2018年</h2><h3 id="计算机类-1"><a href="#计算机类-1" class="headerlink" title="计算机类"></a>计算机类</h3><ul><li>《深入理解Java虚拟机》</li></ul><h3 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h3><ul><li>《大学之路》</li><li>《时间简史》</li><li>《明朝那些事》</li><li>《未来简史》</li><li>《原则》</li></ul><h2 id="2019年"><a href="#2019年" class="headerlink" title="2019年"></a>2019年</h2><h3 id="计算机类-2"><a href="#计算机类-2" class="headerlink" title="计算机类"></a>计算机类</h3><ul><li><a href="/tags/Thinking-in-UML/">《大象——Thinking in UML》</a></li><li>《设计模式——可复用面向对象软件的基础》</li></ul><h3 id="其他-2"><a href="#其他-2" class="headerlink" title="其他"></a>其他</h3><ul><li>世纪三部曲——《巨人的陨落》、《世界的凛冬》、《永恒的边缘》</li><li>《摩根财团》</li><li>《大设计》</li></ul><hr><p><strong>版权声明</strong></p><p>本文为<a href="https://blog.duozhilin.cn/">dzl的学习笔记</a>原创文章，转载请注明出处。<br>本文永久链接：<a href="http://blog.duozhilin.cn/2017/01/13/reading-plan/">http://blog.duozhilin.cn/2017/01/13/reading-plan/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;2017年&quot;&gt;&lt;a href=&quot;#2017年&quot; class=&quot;headerlink&quot; title=&quot;2017年&quot;&gt;&lt;/a&gt;2017年&lt;/h2&gt;&lt;h3 id=&quot;计算机类&quot;&gt;&lt;a href=&quot;#计算机类&quot; class=&quot;headerlink&quot; title=&quot;计算机类&quot;</summary>
      
    
    
    
    <category term="学习" scheme="http://blog.duozhilin.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="书籍" scheme="http://blog.duozhilin.cn/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
</feed>
